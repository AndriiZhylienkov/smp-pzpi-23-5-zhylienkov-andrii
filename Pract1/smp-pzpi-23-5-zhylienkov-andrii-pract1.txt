МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ
 
  
КАФЕДРА ПРОГРАМНОЇ ІНЖЕНЕРІЇ
 


 
Дисципліна «Скриптові мови програмування»
Звіт
з практичної роботи №1


 
 
   
Виконав:
ст. гр. ПЗПІ-23-5
Жилєнков А. О.


	 
	Перевірив:
ст. викладач кафедри ПІ
Сокорчук І. П.
 
	





Харків – 2025
1 ІСТОРІЯ ЗМІН
№
	Дата
	Версія звіту
	Опис змін та виправлень
	1
	25.05.2025
	0.1
	Створено розділ «Завдання»
	2
	25.05.2025
	0.1
	Створено розділ «Опис Виконаної роботи»
	3
	25.05.2025
	0.1
	Створено розділ «Висновки»
	4
	26.05.2025
	0.1
	Створено розділ «Додаток А»
	5
	25.05.2025
	0.1
	Створено розділ «Додаток Б»
	________________
2 ЗАВДАННЯ
Розробити Bash-скрипт, який виводить на екран зображення ялинки, що складається з: 
1. двох ярусів гілок;
2. стовбура висотою 2 рядки;
3. шару снігу довільної непарної ширини (вказується як аргумент командного рядка).
Вимоги до реалізації:
1. кожна гілка складається з кількох рівнобедрених ярусів, побудованих чергуванням символів * та #;
2. відображення має бути симетричним;
3. висота першої гілки — 5 ярусів, другої — 4 яруси;
4. ширина ярусів збільшується на 2 символи в кожному наступному рядку;
5. усі елементи ялинки мають центровано розташовуватись відносно ширини снігу;
6. реалізація повинна включати використання циклів for, while, until, умовних операторів if, а також принаймні однієї функції.
________________
3 ОПИС ВИКОНАНОЇ РОБОТИ
На початку скрипта зчитуються два параметри, передані користувачем: висота ялинки (TREE_HEIGHT) та ширина шару снігу (SNOW_WIDTH). Кожен із параметрів попередньо оброблюється з метою округлення у меншу сторону до цілого числа, з використанням команди cut та команди форматованого виводу printf. Далі відбувається перевірка значень параметрів: якщо хоча б один з них відсутній або не є додатнім числом, скрипт виводить відповідне повідомлення про помилку у стандартний потік помилок і завершує виконання з кодом помилки. Окремо перевіряється, чи відповідає висота мінімальній вимозі, що становить дев’ять рядків для найвищого ярусу, а також чи не є вказана ширина шару снігу меншою за дев’ять символів, що є мінімумом для коректного відображення повної структури ялинки. У разі порушення цих обмежень також виводяться повідомлення про помилку та припиняється виконання скрипта.
Функція draw_line відповідає за виведення одного рядка ялинки або стовбура з заданим символом і кількістю повторень, при цьому здійснюється автоматичне центрування рядка відповідно до вказаної ширини шару снігу. Центрування реалізується за допомогою обчислення відступу зліва, після чого виводиться необхідна кількість символів.
Основу ялинки формують три окремі логічні функції. Перша з них, draw_top_tier, створює верхній ярус, який складається з п’яти рівнів. Для цього використовується асоційоване співставлення масивів ширин та символів для кожного рядка. Цикл for ... in ... по індексах масиву дозволяє ітеративно виводити рядки відповідно до шаблону. Друга функція, draw_other_tier, формує нижчі яруси, що складаються з чотирьох рядків кожен, починаючи з рядка шириною у три символи. Цей процес реалізовано через цикл while, у якому використовується умовна конструкція case для вибору символу та розрахунку ширини рядка в залежності від ітерації. Третя функція, draw_trunk, відповідає за побудову стовбура ялинки, що складається з двох однакових рядків шириною у три символи. Для реалізації даного функціоналу використано цикл until, який виконується доти, поки лічильник не досягне необхідної кількості повторень.
Фінальна частина — функція draw_snow_line — реалізує нижній сніговий шар, суцільний рядок символів *, довжиною, що дорівнює ширині, вказаній користувачем. Тут використовується цикл for ... in ..., що ітерує по числовій послідовності за допомогою seq, виводячи символи без пробілів.
Після визначення функцій скрипт обчислює кількість повних нижніх ярусів, які можуть бути додані до верхнього, виходячи з загальної висоти. Кожен ярус, окрім верхнього, займає чотири рядки, тому ця кількість визначається як ціла частина від ділення різниці між загальною висотою і висотою верхнього ярусу на чотири. Далі послідовно викликаються функції побудови верхнього ярусу, кожного нижнього ярусу згідно з розрахованою кількістю, а також функції побудови стовбура та шару снігу.
У повному обсязі програмний код, реалізований у межах цієї роботи, представлено в додатку Б.
________________


ВИСНОВКИ
У результаті виконання поставленого завдання було створено Bash-скрипт, який формує зображення симетричної ялинки, що складається з ярусів гілок, стовбура та шару снігу. Конструкція скрипта побудована з використанням функцій, циклів різних типів та логічних обчислень для визначення відступів і довжини символів у рядках. Код демонструє чітке розмежування логічних блоків і є достатньо масштабованим для можливого подальшого розширення функціоналу. Скрипт забезпечує необхідну гнучкість при виведенні результату, оскільки параметри висоти дерева й ширини снігу передаються як аргументи при запуску. Це дозволяє застосовувати його для формування зображень різного масштабу.
________________


ДОДАТОК А
Відеозапис
Відеозапис презентації результатів лабораторної роботи: https://youtu.be/6ub7DUAPU2k
Хронологічний опис відеозапису
00:16 — Обробка та валідація вхідних даних
02:20 — Написання функцій
07:13 — Змінна-сховище для кількості додаткових ярусів
07:55 — Процес відображення
08:22 — Тестування програми правильними вхідними параметрами
________________
ДОДАТОК Б
Програмний код
Б.1 smp-pzpi-23-5-zhylienkov-andrii-pract1-code
GitHub репозиторій: https://github.com/NureZhylienkovAndrii/smp-pzpi-23-5-zhylienkov-andrii/blob/main/Pract1/smp-pzpi-23-5-zhylienkov-andrii-pract1/smp-pzpi-23-5-zhylienkov-andrii-pract1-code.sh
  1 #!/bin/bash
  2
  3 TREE_HEIGHT=$(printf "%.0f" "$(echo "$1" | cut -d'.' -f1)")
  4 SNOW_WIDTH=$(printf "%.0f" "$(echo "$2" | cut -d'.' -f1)")
  5
  6 if [[ -z "$TREE_HEIGHT" || -z "$SNOW_WIDTH" || "$TREE_HEIGHT" -le 0 || "$SNOW_WIDTH" -le 0 ]]; then
  7   echo "Помилка: Параметри мають бути додатними числами." >&2
  8   exit 1
  9 fi
 10
 11 if (( TREE_HEIGHT < 9 )); then
 12   echo "Помилка: TREE_HEIGHT має бути щонайменше 9." >&2
 13   exit 2
 14 fi
 15
 16 if (( SNOW_WIDTH < 9 )); then
 17   echo "Помилка: SNOW_WIDTH має бути щонайменше 9." >&2
 18   exit 3
 19 fi
 20
 21 draw_line() {
 22   local symbol=$1
 23   local count=$2
 24   local padding=$(( (SNOW_WIDTH - count) / 2 ))
 25   printf "%*s" "$padding" ""
 26   printf "%0.s$symbol" $(seq 1 "$count")
 27   echo
 28 }
 29
 30 draw_top_tier() {
 31   values=(1 3 5 7 9)
 32   symbols=("*" "#" "*" "#" "*")
 33   for i in "${!values[@]}"; do
 34     draw_line "${symbols[$i]}" "${values[$i]}"
 35   done
 36 }
 37
 38 draw_other_tier() {
 39   count=0
 40   while [ $count -lt 4 ]; do
 41     case $count in
 42       0|2) draw_line "#" $((3 + count * 2)) ;;
 43       1|3) draw_line "*" $((3 + count * 2)) ;;
 44     esac
 45     ((count++))
 46   done
 47 }
 48
 49 draw_trunk() {
 50   until [ $count -eq 2 ]; do
 51     draw_line "#" 3
 52     ((count++))
 53   done
 54 }
 55
 56 draw_snow_line() {
 57   for sym in $(seq 1 $SNOW_WIDTH); do
 58     printf "*"
 59   done
 60   echo
 61 }
 62
 63 LAYERS=$(( (TREE_HEIGHT - 5) / 4 ))
 64
 65 draw_top_tier
 66
 67 for ((i=0; i<LAYERS; i++)); do
 68   draw_other_tier
 69 done
 70
 71 count=0
 72 draw_trunk
 73 draw_snow_line